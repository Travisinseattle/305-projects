/*
 * TCSS 305 Fall 2015
 * Assignment 6 - Tetris.
 */

package view;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.ImageIcon;
import javax.swing.JPanel;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;

/**
 * This is the class that displays the Board JPanel.
 * 
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class BoardPanel extends JPanel implements Observer {
    
    /**
     * Auto-generated serial ID.
     */
    private static final long serialVersionUID = 4445276212311876100L;

    /**
     * Constant for minimum block width.
     */
    private static final int MIN_BLOCK_SIZE = 10;
    
    /**
     * Constant to provide initial Width value for myBoard.
     */
    private static final int BOARD_WIDTH = 10;
    
    /**
     * Constant to provide initial Height value for myBoard.
     */
    private static final int BOARD_HEIGHT = 20;
    
    /**
     * Constant for starting panel width.
     */
    private static final int START_WIDTH = 400;
    
    /**
     * Constant for starting panel height.
     */
    private static final int START_HEIGHT = 800;
    
    /**
     * Constant for the background color.
     */
    private static final Color BACKGROUND_COLOR = Color.WHITE;
    
    /**
     * Boolean field to provide reference to an option to paint a 
     * grid on the Panel.
     */
    private boolean myGrid;
    
    /**
     * Integer field to provide reference to the board width.
     */
    private int myBoardWidth;
    
    /**
     * Integer field to provide reference to the board height.
     */
    private int myBoardHeight;
    
    /**
     * Integer field to provide reference to the width of the blocks.
     */
    private int myBlockSize;
    
    /**
     * Field for a boolean that indicates if the game is paused or not.
     */
    private boolean myPause;
    
    /**
     * Board field that provides reference to the current Board object.
     */
    private Board myBoard;
    
    /**
     * Field for the list that holds the shapes that represent the current
     * piece.  
     */
    private List<Shape> myCurrentBlocks;
    
    /**
     * Field for the list that holds the shapes that represent all of the 
     * fozen blocks.
     */
    private List<Shape> myFrozenBlocks;
    
    /**
     * Field for the background image that should be painted by the paint
     * Component method for the panel.
     */
    private String myBackground;
    
    /**
     * Field to provide reference to a boolean that indicates if the game is
     * over or not.
     */
    private boolean myGameState;
    
    /**
     * Constructor for the BoardPanel.  Initializes the JPanel and calls 
     * the start() method to configure the panel.
     */
    public BoardPanel() {
        super();
        setBackground(BACKGROUND_COLOR);
        configurePanel();
    }
    
    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        //set the background and size.
        myBoardWidth = BOARD_WIDTH;
        myBoardHeight = BOARD_HEIGHT;
        myGrid = false;
        myPause = false;
        myBackground = ".\\background\\ken.jpg";
        myGameState = false;
        setMinimumSize(new Dimension(BOARD_WIDTH * MIN_BLOCK_SIZE,
                                     BOARD_HEIGHT * MIN_BLOCK_SIZE));
        setSize(new Dimension(START_WIDTH, START_HEIGHT));
        
        myBlockSize = getWidth() / myBoardWidth;
        myCurrentBlocks = new ArrayList<Shape>();
        myFrozenBlocks = new ArrayList<Shape>();
        
        /*
         * Instantiate a new Board object.
         */
        myBoard = new Board(myBoardWidth, myBoardHeight);
    }
    
    /**
     * Getter for the Block Width.
     * 
     * @return The current width of the piece blocks.
     */
    public int getBlockWidth() {
        return myBlockSize;
    }
    
    /**
     * A getter to return the board created in BoardPanel.
     * 
     * @return returns the board object assigned to the BoardPanel.
     */
    public Board getBoard() {
        return myBoard;
    }
    
    /**
     * Getter for the current game state, used in pause key dispatcher.
     * 
     * @return Returns the current state of myGameState.
     */
    public boolean isGameState() {
        return myGameState;
    }
    
    /**
     * Setter for myGrid, if checkBox in menu is checked, then paint grid.
     * 
     * @param theBoolean The state of the checkBox in the option menu in 
     * TetrisMenu.
     */
    public void setGrid(final boolean theBoolean) {
        myGrid ^= true;
        repaint();
    }
    
    /**
     * Setter for the pause boolean.
     */
    public void setPaused() {
        myPause ^= true;
        repaint();
    }
    
    /**
     * Setter for myGameState.
     * 
     * @param theBoolean The desired state passed to the method for 
     * myGameState.
     */
    public void setGameState(final boolean theBoolean) {
        myGameState = theBoolean;
        repaint();
    }
    
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            myGameState = myBoard.isGameOver();
            repaint();
        }
    }
    
    /**
     * Paints the current Board.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        //clean up the display of the object.
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        
        /*
         * Set a background image to paint.
         */
        final ImageIcon imgIcon = new ImageIcon(myBackground);
        final Image img = imgIcon.getImage();
        g2d.drawImage(img, 0, 0, getWidth(), getHeight(), null);
        
        /*
         * Create a if/else structure to only paint the board if the game is not over and
         * not paused.  I will hide board and paint a custom message if either is true.
         */
        if (myGameState) {
            //Paint the passed string, in this case: Game Over.
            paintMessage(g2d, "Game Over");
        } else if (myPause) {
          //Paint the passed string, in this case: Game Paused.
            paintMessage(g2d, "Game Paused");
        } else {
            /*
             * Gracefully resize the panel if a JFrame resized event occurs by calling the 
             * helper method calculateBlockSize().  This method will change the block size by
             * performing modulus math on the current width of panel. Set the panel to a size
             * determined by the width of the block after calculateBlockSize() has completed. 
             */
            calculateBlockSize();
            setSize(new Dimension(myBlockSize * myBoardWidth, myBlockSize * myBoardHeight));
            /*
             * Get the current piece, and the frozen blocks. Re-instantiate the list
             * of the Current piece's block shapes (myCurrentBlocks) to clear it.  Capture
             * the piece's current coordinates in board coordinates and assign it to myBlocks.
             */
            final Piece currentPiece = myBoard.getCurrentPiece();
            final List<Block[]> frozenList = myBoard.getFrozenBlocks();        
            final int[][] blocks = ((AbstractPiece) currentPiece).getBoardCoordinates();
            myCurrentBlocks = new ArrayList<Shape>();
            myFrozenBlocks = new ArrayList<Shape>();
            
            /*
             * Call helper methods createCurrentPiece() and createFrozenBlocks() to populate
             * the 2 arrays that will be iterated through when painting graphics.        
             */
            createCurrentPiece(blocks);
            createFrozenBlocks(frozenList);
            
            /*
             * Call helper method paintLists() to iterate through both lists and 
             * paint the associated graphics.
             */
            paintLists(g2d);
            
            /*
             * If myGrid is true, call helper method drawGrid() to draw a grid of lines that
             * are the width of myBlockSize and the number of the board's rows and columns.  
             */
            if (myGrid) {            
                drawGrid(g2d);
            }
        }
    }
    
    /**
     * Helper method for paint component that draws the grid.
     * 
     * @param theGraphics The graphics passed to the helper method.
     */
    private void drawGrid(final Graphics theGraphics) {
        
        /*
         * Declare an integer of panel height to provide a reference that allows
         * the grid to be painted from the bottom up.
         */
        final int panelHeight = getHeight();
        
        /*
         * If grid is clicked, draw a grid of lines that equals MyBoardWidth
         * wide and myBoardHeight tall across the BoardPanel.
         */
        int i;
        final int width = getSize().width;
        final int height = getSize().height;
        
        final int rows = myBoardHeight;
        final int cols = myBoardWidth;

        // draw the rows
        final int rowHeight = myBlockSize;
        for (i = 0; i < rows; i++) {
            ((Graphics2D) theGraphics).setStroke(new BasicStroke(1));
            ((Graphics2D) theGraphics).setPaint(Color.LIGHT_GRAY);
            theGraphics.drawLine(0, panelHeight - (i * rowHeight),
                         width, panelHeight - (i * rowHeight));
        }

        // draw the columns
        final int colWidth = myBlockSize;
        for (i = 0; i < cols; i++) {
            ((Graphics2D) theGraphics).setStroke(new BasicStroke(1));
            ((Graphics2D) theGraphics).setPaint(Color.LIGHT_GRAY);
            theGraphics.drawLine(i * colWidth, 0, i * colWidth, height);
        }
    }
    
    /**
     * Helper method to iterate through the list of blocks for the current piece as well 
     * as the list of blocks for frozen pieces.
     * 
     * @param theGraphics The graphics passed to the method.
     */
    private void paintLists(final Graphics theGraphics) {
        
        //Create an integer to control the stroke width of the drawn shape.
        final int stroke = 2;
        
        /*
         * Paint each block in myCurrentBlocks by drawing a shape of a thickness
         * determined by the integer 'stroke'.  Then fill the same shape in a different
         * color.  This will create a simple "3D-ish" representation of the shape.     
         */
        for (final Shape temp: myCurrentBlocks) {
            ((Graphics2D) theGraphics).setPaint(Color.RED);
            ((Graphics2D) theGraphics).setStroke(new BasicStroke(stroke));
            ((Graphics2D) theGraphics).draw(temp);
            ((Graphics2D) theGraphics).setPaint(Color.PINK);
            ((Graphics2D) theGraphics).fill(temp);
        }
        
        for (final Shape temp: myFrozenBlocks) {
            ((Graphics2D) theGraphics).setPaint(Color.BLUE);
            ((Graphics2D) theGraphics).setStroke(new BasicStroke(stroke));
            ((Graphics2D) theGraphics).draw(temp);
            ((Graphics2D) theGraphics).setPaint(Color.CYAN);
            ((Graphics2D) theGraphics).fill(temp);
        }
    }
    
    /**
     * Helper method to draw the game over screen for when board.isGameOver is true.
     * 
     * @param theGraphics The Graphics object passed to the method.
     * @param theString The String to be displayed by the method.
     */
    private void paintMessage(final Graphics theGraphics, final String theString) {
        
        /*
         * Borrow some code from class example code: Hello Goodbye with PropertyChangeListener.
         * @author Alan Fowler
         * @version 1.3
         */
        final Font font = new Font(Font.SERIF, Font.BOLD + Font.ITALIC, myBlockSize);
        theGraphics.setFont(font);

        // get the visual bounds of the text using a GlyphVector.
        final FontRenderContext renderContext = 
                        ((Graphics2D) theGraphics).getFontRenderContext();
        final GlyphVector glyphVector = font.createGlyphVector(renderContext, theString);
        final Rectangle2D visualBounds = glyphVector.getVisualBounds().getBounds();
        
        final int x = (int) ((getWidth() - visualBounds.getWidth())
                        / 2 - visualBounds.getX());
        final int y = (int) ((getHeight() - visualBounds.getHeight())
                        / 2 - visualBounds.getY());
        
        //Set the color white so that it will display over my backgrounds.
        theGraphics.setColor(Color.WHITE);

        //Display the text visually centered in the JPanel
        theGraphics.drawString(theString, x, y);
    }
    
    /**
     * Helper method to determine size of Panel.  Does modulus math on the width and height
     * of the Panel.  If the quotient of the width is less than the height, assign the Block
     * size to the width.  If the height is less, assign block size value to height.
     */
    private void calculateBlockSize() {
        /*
         * Capture the modulus values and panel dimensions and cast them to BigInteger,
         * which has a method to obtain quotient and remainders. 
         */
        final BigInteger width = BigInteger.valueOf(getWidth());
        final BigInteger height = BigInteger.valueOf(getHeight());
        final BigInteger modWidth = BigInteger.valueOf(myBoardWidth);
        final BigInteger modHeight = BigInteger.valueOf(myBoardHeight);
        
        
        //Create an array using the BigInteger method divideAndRemainder.
        final BigInteger[] widthValues = width.divideAndRemainder(modWidth);
        final BigInteger[] heightValues = height.divideAndRemainder(modHeight);
        final int newWidth = widthValues[0].intValue();
        final int newHeight = heightValues[0].intValue();
        
        /*
         * If the newWidth is bigger than the allowed MIN_BLOCK_SIZE then examine
         * the quotient values of newWidth and newHeight.  Whichever is smaller will
         * then be used to update myBlockSize.  This insures that if the resize event 
         * only stretches width or height the panel will not grow out of bounds.
         */
        if (newWidth >= MIN_BLOCK_SIZE) {
            if (newWidth < newHeight) {
                myBlockSize = newWidth;
            } else if (newHeight < newWidth) {
                myBlockSize = newHeight;
            }
        }    
    }
    
    /**
     * Helper method to declare objects in my PaintComponent method.
     * 
     * @param theBlocks the 2D integer array of block coordinates passed to the method.
     */
    private void createCurrentPiece(final int[][] theBlocks) {
        final int panelHeight = getHeight();
        /*
         * Step through myBlocks using the first index of the 2D array.  Using
         * the [0] index and [1] index of this array, create a Rectangle2D and 
         * make it the width of myBlockWidth and the height of the panel height divided
         * by myBoardHeight subtracted from the total height of the panel.  (EX: panel
         * is 800 pixels high, so 800 / the amount of tiles in the board: 20 so each row
         * is 40 pixels high. Finally subtract that from 800 to get the blocks to fall 
         * downward instead of up.)  Add each rectangle2D to myCurrentBlocks.        
         */
        for (int i = 0; i < theBlocks.length; i++) {
            final int j = 0;
            final int x = theBlocks[i][j] * myBlockSize;
            //Bug where currentPeice falls one level more than they should.
            final int y = (panelHeight - myBlockSize) - (theBlocks[i][j + 1]
                            * myBlockSize);
            /*
             * Since my code wants to start at bottom and fall upward, certain things have to 
             * be coded oddly to reverse this behavior.  I have to have y bigger than the 
             * negative of the block height, in order to display the piece at the top of the
             * panel.
             */
            if (y  > -myBlockSize) {
                final Shape currentPieceBlock = new RoundRectangle2D.Double(x, y,
                                                                       myBlockSize,
                                                                       myBlockSize,
                                                                       15,
                                                                       15);
                myCurrentBlocks.add(currentPieceBlock);
            }
        }
    }
    
    /**
     * Helper method to create a list of frozen blocks.
     * 
     * @param theFrozenList The Linked List of Block[] arrays that represent
     * the frozen blocks on the board.
     */
    private void createFrozenBlocks(final List<Block[]> theFrozenList) {
        //Store the height of the panel for use in sizing the blocks.
        final int panelHeight = getHeight();
        //Create a index so I can use it to decide where the block exists.
        int frozenIndex = 1;
        //Make an iterator to iterate through the frozen list.
        final Iterator<Block[]> iter = theFrozenList.iterator();
        while (iter.hasNext()) {
            //store the current Block[] array to an object.
            final Block[] temp = iter.next();
            /*
             * Multiply index by block height to find out where the array is 
             * on the panel.  Subtract it from the panel height to have it read 
             * top to bottom, instead of bottom to top.
             */
            final int y = panelHeight - (frozenIndex * myBlockSize);
            for (int j = 0; j < temp.length; j++) {
                /*
                 * Set the X coordinate to the index of temp times the width of
                 * the blocks.
                 */
                final int x = j * myBlockSize;
                //Store the current Block to an object.
                final Block tempBlock = temp[j];
                /*
                 * Provided that the block is not empty, create a Rectangle2D.Double
                 * of it and store it to the myFrozenBlocks array, which will be iterated
                 * through when it comes time to paint the frozen blocks.
                 */
                if (!(tempBlock.equals(Block.EMPTY))) {
                    final Shape block = new RoundRectangle2D.Double(x, y,
                                                              myBlockSize,
                                                              myBlockSize,
                                                              15,
                                                              15);
                    myFrozenBlocks.add(block);
                }
            }
            //advance the index object.
            frozenIndex++;
        }
    }
}

