/*
 * TCSS 305 Fall 2015
 * Assignment 5 - PowerPaint.
 */

package view;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.JTextArea;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;

/**
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class BoardPanel extends JPanel implements Observer {
    
    /**
     * Auto-generated serial ID.
     */
    private static final long serialVersionUID = 4445276212311876100L;

    /**
     * Constant for Panel Width.
     */
    private static final int BLOCK_WIDTH = 10;
    
    /**
     * Constant to provide initial Width value for myBoard.
     */
    private static final int BOARD_WIDTH = 10;
    
    /**
     * Constant to provide initial Height value for myBoard.
     */
    private static final int BOARD_HEIGHT = 20;
    
    /**
     * Constant for the background color.
     */
    private static final Color BACKGROUND_COLOR = Color.WHITE;
    
    /**
     * Boolean field to provide reference to an option to paint a 
     * grid on the Panel.
     */
    private boolean myGrid;
    
    /**
     * Integer field to provide reference to the board width.
     */
    private int myBoardWidth;
    
    /**
     * Integer field to provide reference to the board height.
     */
    private int myBoardHeight;
    
    /**
     * Integer field to provide reference to the size of the blocks.
     */
    private int myBlockWidth;
    
    /**
     * JTextField field that provides reference to the JTextField that
     * displays the toString of the board.
     */
    private JTextArea myField;
    
    /**
     * Board field that provides reference to the current Board object.
     */
    private Board myBoard;
    
    /**
     * Field for the Current Peice that will be displayed in the Panel.
     */
    private Piece myCurrentPiece;
    
    /**
     * Field for the list of frozen Blocks.
     */
    private List<Block[]> myFrozenList;
    
    /**
     * Field for the list that holds the shapes that represent the current
     * piece.  
     */
    private List<Shape> myCurrentBlocks;
    
    /**
     * Field for the 2d array that represents the current piece's coordinates
     * on the board.
     */
    private int[][] myBlocks;
    

    /**
     * Constructor for the BoardPanel.  Initializes the JPanel and calls 
     * the start() method to configure the panel.
     */
    public BoardPanel() {
        super();
        setSize(new Dimension(BLOCK_WIDTH * BOARD_WIDTH,
                                     BLOCK_WIDTH * BOARD_HEIGHT));
        setBackground(BACKGROUND_COLOR);
        configurePanel();
    }
    
    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        //set the background and size.
        myBoardWidth = BOARD_WIDTH;
        myBoardHeight = BOARD_HEIGHT;
        myBlockWidth = 39 + 1;
        myGrid = true;
        setSize(new Dimension(myBlockWidth * myBoardWidth,
                              myBlockWidth * myBoardHeight));
        myCurrentBlocks = new ArrayList<Shape>();
        myBlocks = new int[4][2];
        
        /*
         * Instantiate a new Board object.
         */
        myBoard = new Board(myBoardWidth, myBoardHeight);
    }
    
    /**
     * Getter for the Block Width.
     * 
     * @return The current width of the piece blocks.
     */
    public int getBlockWidth() {
        return myBlockWidth;
    }
    
    /**
     * A getter to return the board created in BoardPanel.
     * 
     * @return returns the board object assigned to the BoardPanel.
     */
    public Board getBoard() {
        return myBoard;
    }    
    
    /**
     * Setter for the Block Width.
     * 
     * @param theWidth The integer size that myBlockWidth will be set to.
     */
    public void setBlockWidth(final int theWidth) {
        //set default width to the block width, just to instantiate it.
        int returnWidth = myBlockWidth;
        /*
         * Make sure myBlockWidth is still larger than the minimum (BLOCK_WIDTH)
         * and if it is, run the changeBlock method.
         */
        if (myBlockWidth > BLOCK_WIDTH) {
            returnWidth = changeBlock(theWidth); //call helper method. 
        }
        myBlockWidth = returnWidth;
    }
    
    /**
     * Helper method for setBlockWidth() that makes the block width larger.
     * 
     * @param theWidth The size of the int passed to setBlockWidth().
     * @return returns the new block size.
     */
    private int changeBlock(final int theWidth) {
        final BigInteger passedWidth = BigInteger.valueOf(theWidth);
        //set an initial value for return that is the current size of the block.
        int returnWidth = myBlockWidth;
        
        //modulate the passedWidth by the board width.
        final BigInteger[] results = passedWidth.divideAndRemainder
                        (new BigInteger(String.valueOf(myBoardWidth)));
        int quotient = results[0].intValue();  //get the quotient.
        /*
         * If the quotient is bigger than the current block width, subtract current block
         * width from quotient and then run for loop, increasing the block the number of 
         * times of the difference.  If it is smaller than the current block size BUT still
         * bigger than the constant BLOCK_WIDTH which is the minimum block size, then 
         * subtract quotient from Block size and decrement the block by that amount.
         */
        if (quotient > myBlockWidth) {  //If quotient is bigger than current block size.
            quotient = quotient - myBlockWidth;
            for (int i = 0; i < quotient; i++) {
                returnWidth++;
            }
        } else if (quotient < myBlockWidth && quotient > BLOCK_WIDTH) {
            quotient = myBlockWidth - quotient;
            for (int i = 0; i < quotient; i++) {
                returnWidth--;
            }
        }
        System.out.println(returnWidth + " changeBlock");
        return returnWidth;
    }

    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            repaint();
        }
    }
    
    /**
     * Paints the current Board.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        //clean up the display of the object.
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        /*
         * Get the current piece, and the frozen blocks. Re-instantiate the list
         * of the Current piece's block shapes (myCurrentBlocks) to clear it.  Capture
         * the piece's current coordinates in board coordinates and assign it to myBlocks.
         */
        myCurrentPiece = myBoard.getCurrentPiece();
        myFrozenList = myBoard.getFrozenBlocks();
        myCurrentBlocks = new ArrayList<Shape>();
        myBlocks = ((AbstractPiece) myCurrentPiece).getBoardCoordinates();
        
        /*
         * Step through myBlocks using the first index of the 2D array.  Using
         * the [0] index and [1] index of this array, create a Rectangle2D and 
         * make it the width of myBlockWidth and the height of the panel height divided
         * by myBoardHeight subtracted from the total height of the panel.  (EX: panel
         * is 800 pixels high, so 800 / the amount of tiles in the board: 20 so each row
         * is 40 pixels high. Finally subtract that from 800 to get the blocks to fall 
         * downward instead of up.)  Add each rectangle2D to myCurrentBlocks.        
         */
        for (int i = 0; i < myBlocks.length; i++) {
            final int j = 0;
            final int x = myBlocks[i][j] * myBlockWidth;
            final int y = getHeight() - (myBlocks[i][j + 1] * (getHeight()
                            / myBoardHeight));
            if (y > 0) {
                final Shape currentPieceBlock = new Rectangle2D.Double(x, y,
                                                                       myBlockWidth,
                                                                       getHeight()
                                                                       / myBoardHeight);
                myCurrentBlocks.add(currentPieceBlock);
                System.out.println("Block " + i + " Coordinates: (" + x + ", " + y + ").");
            }
        }
        
        /*
         * Paint each block in myCurrentBlocks.        
         */
        for (final Shape temp: myCurrentBlocks) {
            g2d.setPaint(Color.RED);
            g2d.fill(temp);
        }
        
        
        /*
         * If grid is clicked, draw a grid of lines that equals MyBoardWidth
         * wide and myBoardHeight tall across the BoardPanel.
         */
        if (myGrid) {
            int i;
            final int width = getSize().width;
            final int height = getSize().height;
            
            final int rows = myBoardHeight;
            final int cols = myBoardWidth;

            // draw the rows
            final int rowHeight = getHeight() / myBoardHeight;
            for (i = 0; i < rows; i++) {
                g2d.setStroke(new BasicStroke(1));
                g2d.setPaint(Color.BLACK);
                g2d.drawLine(0, getHeight() - (i * rowHeight),
                             width, getHeight() - (i * rowHeight));
            }

            // draw the columns
            final int colWidth = myBlockWidth;
            for (i = 0; i < cols; i++) {
                g2d.setStroke(new BasicStroke(1));
                g2d.setPaint(Color.BLACK);
                g2d.drawLine(i * colWidth, 0, i * colWidth, height);
            }
        }
    }
    
}

