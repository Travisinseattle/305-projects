/*
 * TCSS 305 Fall 2015
 * Assignment 5 - PowerPaint.
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.border.Border;

import model.AbstractPiece;
import model.Board;
import model.Piece;

/**
 * This is the main method of the PowerPaint program.  
 * 
 * @author Travis Holloway
 * @version Assignment 5: PowerPaint, November 9 2015
 */
public class PreviewPanel extends JPanel implements Observer {
    
    /**
     * Constant representing the amount to divide the height of BoardPanel
     * by to get the value for how high this panel should be drawn.  Since
     * there are 3 panels to the right of the BoardPanel, the constant is 
     * set to 3.
     */
    private static final int PANEL_COUNT = 3;
    
    /**
     * Constant that represents the minimum size of a Block.  This number
     * times the width and height of a board will create the smallest possible
     * display dimensions for the panel.  Mirrors the size used in BoardPanel.
     */
    private static final int MIN_BLOCK_SIZE = 10;
    
    /**
     * Auto-generated serial ID.
     */
    private static final long serialVersionUID = 2500924605259207155L;

    /**
     * Field that provides a reference to the Board passed to the 
     * constructor.
     */
    private final BoardPanel myBoardPanel;
    
    /**
     * Field that provides a reference to the Board that is being used by
     * myBoardPanel.
     */
    private Board myBoard;
    
    /**
     * Field that provides reference to the piece that will be shown 
     * by the panel.
     */
    private Piece myPreviewPeice;
    
    /**
     * Integer field to provide reference to the width of the blocks.
     */
    private int myBlockWidth;
    
    /**
     * Integer field to provide reference to the height of the blocks.
     */
    private int myBlockHeight;
    
    /**
     * Field for the list that holds the shapes that represent the current
     * piece.  
     */
    private List<Shape> myNextBlocks;

    /**
     * Constructor for PreviewPanel.
     * 
     * @param theBoardPanel A reference to the Board from TetrisGUI.
     */
    public PreviewPanel(final BoardPanel theBoardPanel) {
        super();
        myBoardPanel = theBoardPanel;
        configurePanel();
    }
    
    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        myBoard = myBoardPanel.getBoard();
        myPreviewPeice = myBoard.getNextPiece();
        setMinimumSize(new Dimension(myBoard.getWidth() * MIN_BLOCK_SIZE,
                                     (myBoard.getHeight() * MIN_BLOCK_SIZE) / PANEL_COUNT));
        setSize(new Dimension(myBoardPanel.getWidth(),
                              myBoardPanel.getHeight() / PANEL_COUNT));
        setBackground(Color.LIGHT_GRAY);
        myNextBlocks = new ArrayList<Shape>();
        myBlockWidth = getWidth() / myBoard.getWidth();
        myBlockHeight = getHeight() / 6;
        
        final Border raisedbevel = BorderFactory.createRaisedBevelBorder();
        final Border loweredbevel = BorderFactory.createLoweredBevelBorder();
        
        final Border titled = BorderFactory.createTitledBorder(raisedbevel, "Preview Pane");
        
        setBorder(BorderFactory.createCompoundBorder(titled, loweredbevel));
    }
    
    /**
     * Setter for the Block Width.
     * 
     * @param theWidth The integer size that myBlockWidth will be set to.
     */
    public void setBlockWidth(final int theWidth) {
        myBlockWidth = getWidth() / myBoard.getWidth();
    }
    
    /**
     * Setter for the Block Width.
     * 
     * @param theHeight The integer size that myBlockHeight will be set to.
     */
    public void setBlockHeight(final int theHeight) {
        myBlockHeight = getHeight() / 4;
    }
    
    /**
     * Paints the current Board.
     * 
     * @param theGraphics The graphics context to use for painting.
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        //clean up the display of the object.
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON);
        /*
         * Get the current piece, and the frozen blocks. Re-instantiate the list
         * of the Current piece's block shapes (myCurrentBlocks) to clear it.  Capture
         * the piece's current coordinates in board coordinates and assign it to myBlocks.
         */
        myPreviewPeice = myBoard.getNextPiece(); 
        final int[][] blocks = ((AbstractPiece) myPreviewPeice).getRotation();
        myNextBlocks = new ArrayList<Shape>();
        
        //Call helper methods.        
        createNextPiece(blocks);
                
        /*
         * Paint each block in myCurrentBlocks.        
         */
        for (final Shape temp: myNextBlocks) {
            g2d.setPaint(Color.RED);
            g2d.fill(temp);
        }
    }
    
    /**
     * Helper method to paint objects in my PaintComponent method.
     * 
     * @param theBlocks the 2D integer array of block coordinates passed to the method.
     */
    private void createNextPiece(final int[][] theBlocks) {
        //final int panelHeight = getHeight();
        /*
         * Step through myBlocks using the first index of the 2D array.  Using
         * the [0] index and [1] index of this array, create a Rectangle2D and 
         * make it the width of myBlockWidth and the height of the panel height divided
         * by myBoardHeight subtracted from the total height of the panel.  (EX: panel
         * is 800 pixels high, so 800 / the amount of tiles in the board: 20 so each row
         * is 40 pixels high. Finally subtract that from 800 to get the blocks to fall 
         * downward instead of up.)  Add each rectangle2D to myCurrentBlocks.        
         */
        for (int i = 0; i < theBlocks.length; i++) {
            final int j = 0;
            final int x = ((7 / 2) * myBlockWidth) + (theBlocks[i][j] * myBlockWidth);
            //Bug where currentPeice falls one level more than they should.
            final int y = theBlocks[i][j + 1] * myBlockHeight;
            /*
             * Since my code wants to start at bottom and fall upward, certain things have to 
             * be coded oddly to reverse this behavior.  I have to have y bigger than the 
             * negative of the block height, in order to display the piece at the top of the
             * panel.
             */
            final Shape currentPieceBlock = new Ellipse2D.Double(x, y,
                                                                   myBlockWidth,
                                                                   myBlockHeight);
            myNextBlocks.add(currentPieceBlock);
            
        }
    }

    /* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            myPreviewPeice = myBoard.getNextPiece();
            repaint();
        }
    }
}
