/*
 * TCSS 305 Fall 2015
 * Assignment 6 - Tetris.
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

import model.Board;

/**
 * This is the class that the main JFrame.
 * 
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class TetrisGUI {
    
    /**
     *  The initial delay (in milliseconds) for the step timer. 
     */
    public static final int INITIAL_DELAY = 0;
    
    /** 
     * The default delay (in milliseconds) for the move timer. 
     */
    public static final int MOVE_DELAY = 500;
    
    /**
     * Constant for the size of the JFrame's border.
     */
    private static final int FRAME_BORDER = 10;

    /**
     * Auto-generated serial required by class.
     */
    private static final long serialVersionUID = -4763324919600478629L;
    
    /**
     * JFrame field that provides reference to the main JFrame container of
     * Tetris.
     */
    private final JFrame myFrame;
    
    /**
     * JPanel field that provides reference to the BoardPanel JPanel container.
     */
    private final BoardPanel myBoardPanel;
    
    /**
     * Timer field that provides reference to the Timer used to animate the program.
     */
    private final Timer myTimer;
    
    /**
     * A field for the left key.
     */
    private char myLeftKey;
    
    /**
     * A field for the right key.
     */
    private char myRightKey;
    
    /**
     * A field for the down key.
     */
    private char myDownKey;
    
    /**
     * A field for the Drop key.
     */
    private char myDropKey;
    
    /**
     * A field for the left key.
     */
    private char myPauseKey;
    
    /**
     * A field for the rotate key.
     */
    private char myRotateKey;
    
    /**
     * Field that provides a reference to the board in BoardPanel.
     */
    private final Board myBoard;
    
    /**
     * Field that provides reference to boolean to indicate if the game
     * is paused or not.
     */
    private boolean myPause;
    
    /**
     * Field to represent the preview panel.
     */
    private PreviewPanel myPreview;
    
    /**
     * Field to represent the state of the current game.  If true, game is
     * running, if false, game is over.
     */
    private boolean myGameOver;

    /**
     * Constructor for TetrisGui.  Calls super(), instantiates myFrame and
     * myBoardPanel.
     */
    public TetrisGUI() {
        super();
        myFrame = new JFrame();
        myBoardPanel = new BoardPanel();
        myTimer = new Timer(MOVE_DELAY, new MoveListener());
        myBoard = ((BoardPanel) myBoardPanel).getBoard();
        myPause = false;
        myGameOver = false;
    }
    
    /**
     * Method that provides fields to class constants and configures the class
     * JFrame.
     */
    public void start() {
        
        /*
         * Begin by adding a title to the JFrame, a default close operation, and 
         * centering the JFrame.
         */
        myFrame.setTitle("Tetris");
        
        //Set the Icon for the Frame Title.
        final Icon saveIcon = new ImageIcon(".\\icons\\Tetris.png");
        final Image image = ((ImageIcon) saveIcon).getImage();
        myFrame.setIconImage(image);        
        
        //Call helper method to add containers.
        addContainers();
        
        //Call helper method to assign keys.
        assignKeys();
        
        //assign the key dispatcher, prevents loss of focus.
        final KeyboardFocusManager manager = 
                        KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new TetrisKeyDispatcher());
        
        //Add observers to the Board in myBoardPanel.
        myBoard.addObserver(myBoardPanel);
        myBoard.addObserver(myPreview);
        
        /*
         * Set the Default Close Operation. Pack the elements of myFrame. Set the minimum
         * to the current size. Make the frame visible. Center it in the middle of
         * the display.
         */
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.pack();
        myFrame.setVisible(true);
        myFrame.setLocationRelativeTo(null);
    }
    
    /**
     * Helper method for start() that adds the Containers to myFrame.
     */
    private void addContainers() {
        
        //Create a JMenuBar.
        final TetrisMenu menu = new TetrisMenu(myBoardPanel, myFrame, myTimer);
        myFrame.setJMenuBar(menu);
        
        final JPanel wrapper = new JPanel();
        wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.X_AXIS));
        wrapper.setBackground(Color.GRAY);
        wrapper.setPreferredSize(new Dimension((myBoardPanel.getWidth() * 2)
                                               + FRAME_BORDER * 2,
                                               myBoardPanel.getHeight()));
        
        myFrame.add(wrapper, BorderLayout.CENTER);
        
        /*
         * Create 2 border objects. The raised border is the outer boarder and 
         * will contain the title.  The lowered bevel is the inner boarder.
         */
        final Border raisedbevel = BorderFactory.createRaisedBevelBorder();
        final Border loweredbevel = BorderFactory.createLoweredBevelBorder();
        
        /*
         * Create a titled boarder using boarder factory.  
         */
        final Border titled = BorderFactory.createTitledBorder(raisedbevel,
                                                               "Tetris 305",
                                                               TitledBorder.
                                                               DEFAULT_JUSTIFICATION,
                                                               TitledBorder.DEFAULT_POSITION,
                                                               new Font("monotype corsiva",
                                                                        Font.PLAIN, 40),
                                                               Color.BLACK);
        wrapper.setBorder(BorderFactory.createCompoundBorder(titled, loweredbevel));
        
        final JPanel right = new JPanel();
        right.setLayout(new BoxLayout(right, BoxLayout.Y_AXIS));
        right.setBackground(Color.GRAY);
        
        myPreview = new PreviewPanel(myBoardPanel);
                
        final ScorePanel score = new ScorePanel();
        
        final KeyPanel keys = new KeyPanel();
        
        right.add(myPreview);
        right.add(Box.createVerticalStrut(FRAME_BORDER));
        right.add(score);
        right.add(Box.createVerticalStrut(FRAME_BORDER));
        right.add(keys);
        
        wrapper.add(myBoardPanel);
        wrapper.add(Box.createHorizontalStrut(FRAME_BORDER));
        wrapper.add(right);
        
    }
    
    /**
     * Helper method to assign keys.
     */
    private void assignKeys() {
        myLeftKey = 'a';
        myRightKey = 'd';
        myDownKey = 's';
        myDropKey = 'l';
        myPauseKey = 'p';
        myRotateKey = 'j';
    }
    
    /**
     * A class to control move events for the Timer.
     * 
     * @author Travis Holloway
     * @version Assignment 5: PowerPaint, November 9 2015
     */
    private class MoveListener implements ActionListener {
        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myGameOver = myBoard.isGameOver();
            if (!myGameOver) {
                myBoard.step();
            }
        }
    }
    
  /**
   * The key listener for the Tetris Program. 
   * 
   * @author Travis Holloway
   * @version Assignment 5: PowerPaint, November 9 2015
   */
    public class TetrisKeyDispatcher implements KeyEventDispatcher {
        @Override
            public boolean dispatchKeyEvent(final KeyEvent theEvent) {
            if (whichKey(theEvent) == myLeftKey) {
                //Call moveLeft.
                myBoard.moveLeft();
            } else if (whichKey(theEvent) == myRightKey) {
                //Call moveLeft.
                myBoard.moveRight();
            } else if (whichKey(theEvent) == myDownKey) {
                //Call moveLeft.
                myBoard.moveDown();
            } else if (whichKey(theEvent) == myDropKey) {
                //Call moveLeft.
                myBoard.hardDrop();
            } else if (whichKey(theEvent) == myRotateKey) {
                //Call moveLeft.
                myBoard.rotate();
            } else if (whichKey(theEvent) == myPauseKey) {
              //bitwise boolean swap.
                myPause ^= true;
                if (myPause) {
                    myBoardPanel.setPaused();
                    myTimer.stop();                        
                } else if (myBoardPanel.getGameState()) {
                    myBoardPanel.setPaused();
                    myTimer.start();                        
                }
            }
            return false;
        }
        
        /**
         * Helper method to reduce complexity in key dispatcher.
         * 
         * @param theEvent The event passed to the key dispatcher and then passed
         * to this method.
         * @return Returns space unless theEvent is a KEY_TYPED event in which case
         * it returns the char of the theEvent.
         */
        private char whichKey(final KeyEvent theEvent) {
            //set an initial value that won't be used.
            char returnChar = ' ';
            
            /*
             * Check if theEvent is a KEY_TYPED event, if so, set the returnChar to
             * the value of theEvent's char.
             */
            if (theEvent.getID() == KeyEvent.KEY_TYPED) {
                returnChar = theEvent.getKeyChar();
            }        
            return returnChar;
        }
    }
}