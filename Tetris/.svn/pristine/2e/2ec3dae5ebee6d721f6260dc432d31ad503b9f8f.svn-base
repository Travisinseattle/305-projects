/*
 * TCSS 305 Fall 2015
 * Assignment 6 - Tetris.
 */

package view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

import model.Board;

/**
 * This is the class that displays the Score JPanel.
 * 
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class ScorePanel extends JPanel implements Observer {
    
    /**
     * Auto-generated serial ID.
     */
    private static final long serialVersionUID = -428301323664751701L;
    
    /**
     * Constant to represent the distance between labels.
     */
    private static final int SPACER = 16;
    
    /**
     * Field to represent the amount oSPACERf lines cleared this level.
     */
    private int myCleared;
    
    /**
     * Field to represent the current level of the program.
     */
    private int myLevel;
    
    /**
     * Field to represent the amount of lines required to clear this level.
     */
    private int myRequired;
    
    /**
     * Field to represet the BoardPanel used by the program.
     */
    private final BoardPanel myBoardPanel;
    
    /**
     * Field to represent the font used by the panel.
     */
    private final Font myFont;

    /**
     * Constructor for ScorePanel.
     * 
     * @param theBoardPanel the BoardPanel used by the program.
     * @param theFont The font used by the program, stored in TetrisGui.
     */
    public ScorePanel(final BoardPanel theBoardPanel, final Font theFont) {
        super();
        myBoardPanel = theBoardPanel;
        myFont = theFont;
        configurePanel();
    }

    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        setBackground(Color.LIGHT_GRAY);
        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        
        final Border raisedbevel = BorderFactory.createRaisedBevelBorder();
        final Border loweredbevel = BorderFactory.createLoweredBevelBorder();
        final Border titled = BorderFactory.createTitledBorder(raisedbevel,
                                                               "Score",
                                                               TitledBorder.
                                                               DEFAULT_JUSTIFICATION,
                                                               TitledBorder.
                                                               DEFAULT_POSITION,
                                                               myFont.deriveFont(Font.PLAIN, 30f),
                                                               Color.BLACK);
        
        setBorder(BorderFactory.createCompoundBorder(titled, loweredbevel));
        
        
        
        //Add the labels.
        add(Box.createVerticalStrut(SPACER));
        add(createLevel());
        add(Box.createVerticalStrut(SPACER));
        add(createRequiredLines());
        add(Box.createVerticalStrut(SPACER));
        add(createClearedLines());
        add(Box.createVerticalStrut(SPACER));
        add(createScore());
        add(Box.createVerticalStrut(SPACER));
    }
    
    /**
     * Method to create and configure a JLabel for the current Level.
     * 
     * @return Returns a JLabel that represents the current level.
     */
    private JLabel createLevel() {
        final JLabel level = new JLabel("Current Level is: " + myLevel);
        level.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        level.setAlignmentX(Component.CENTER_ALIGNMENT);
        level.setAlignmentY(Component.CENTER_ALIGNMENT);
        return level;
    }
    
    /**
     * Method to create and configure a JLabel for the current required amount
     * of lines cleared before next level.
     * 
     * @return Returns a JLabel that represents the required amount of lines
     * cleared before next level.
     */
    private JLabel createRequiredLines() {
        final JLabel required = new JLabel("Required lines before next level: "
                          + myRequired);
        required.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        required.setAlignmentX(Component.CENTER_ALIGNMENT);
        required.setAlignmentY(Component.CENTER_ALIGNMENT);
        return required;
    }
    
    /**
     * Method to create and configure a JLabel to display how many lines have
     * been cleared this level.
     * 
     * @return Returns a JLabel that represents the amount of lines cleared this 
     * level.
     */
    private JLabel createClearedLines() {        
        final JLabel cleared =  new JLabel("Lines Cleared so far: " 
                                           + myCleared);
        cleared.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        cleared.setAlignmentX(Component.CENTER_ALIGNMENT);
        cleared.setAlignmentY(Component.CENTER_ALIGNMENT);
        return cleared;
    }
    
    /**
     * Method to create and configure a JLabel for total Score.
     * 
     * @return Returns a JLabel that represents the Total score for this game.
     */
    private JLabel createScore() {
        final JLabel score = new JLabel("Total Score is: " + myCleared);
        score.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        score.setAlignmentX(Component.CENTER_ALIGNMENT);
        score.setAlignmentY(Component.CENTER_ALIGNMENT);
        return score;
    }
    

    /* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            myBoardPanel.setLevel(myLevel);
            repaint();
            
        }
    }

}
