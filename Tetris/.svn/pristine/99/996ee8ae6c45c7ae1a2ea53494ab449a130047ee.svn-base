/*
 * TCSS 305 Fall 2015
 * Assignment 6 - Tetris.
 */

package view;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

import model.Board;

/**
 * This is the class that displays the Score JPanel.
 * 
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class ScorePanel extends JPanel implements Observer {
    
    /**
     * Auto-generated serial ID.
     */
    private static final long serialVersionUID = -428301323664751701L;
    
    /**
     * Constant to represent the distance between labels.
     */
    private static final int SPACER = 16;
    
    /**
     * Constant for the score multiplier. Prefered multiples of 10.
     */
    private static final int MULTIPLIER = 100;
    
    /**
     * Constant for the displayed string of myClearedLabel.
     */
    private static final String CLEARED = "Lines Cleared so far: ";
    
    /**
     * Constant for the displayed string of myClearedLabel.
     */
    private static final String LEVEL = "Current Level is: ";
    
    /**
     * Constant for the displayed string of myClearedLabel.
     */
    private static final String REQUIRED = "Required lines before next level: ";
    
    /**
     * Constant for the displayed string of myClearedLabel.
     */
    private static final String SCORE = "Total Score is: ";
    
    /**
     * Field to represent the amount of lines cleared this level.
     */
    private int myCleared;
    
    /**
     * Field to represent the current level of the program.
     */
    private int myLevel;
    
    /**
     * Field to represent the amount of lines required to clear this level.
     */
    private int myRequired;
    
    /**
     * Field to represent the score for the current game.
     */
    private int myScore;
    
    /**
     * Field to represent the Cleared JLabel.
     */
    private JLabel myClearedLabel;
    
    /**
     * Field to represent the Level JLabel.
     */
    private JLabel myLevelLabel;
    
    /**
     * Field to represent the Required JLabel.
     */
    private JLabel myRequiredLabel;
    
    /**
     * Field to represent the Score JLabel.
     */
    private JLabel myScoreLabel;
    
    /**
     * Field to represent the BoardPanel used by the program.
     */
    private final BoardPanel myBoardPanel;
    
    /**
     * Field to represent the font used by the panel.
     */
    private final Font myFont;

    /**
     * Constructor for ScorePanel.
     * 
     * @param theBoardPanel the BoardPanel used by the program.
     * @param theFont The font used by the program, stored in TetrisGui.
     */
    public ScorePanel(final BoardPanel theBoardPanel, final Font theFont) {
        super();
        myBoardPanel = theBoardPanel;
        myFont = theFont;
        myRequired = 1;
        myLevel = 1;
        myScore = 0;
        configurePanel();
    }

    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        setBackground(Color.LIGHT_GRAY);
        setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
        
        final Border raisedbevel = BorderFactory.createRaisedBevelBorder();
        final Border loweredbevel = BorderFactory.createLoweredBevelBorder();
        final Border titled = BorderFactory.createTitledBorder(raisedbevel,
                                                               "Score",
                                                               TitledBorder.
                                                               DEFAULT_JUSTIFICATION,
                                                               TitledBorder.
                                                               DEFAULT_POSITION,
                                                               myFont.
                                                               deriveFont(Font.PLAIN, 30f),
                                                               Color.BLACK);
        
        setBorder(BorderFactory.createCompoundBorder(titled, loweredbevel));
        
        createClearedLines();
        createLevel();
        createRequiredLines();
        createScore();
        
        
        
        //Add the labels.
        add(Box.createVerticalStrut(SPACER));
        add(myLevelLabel);
        add(Box.createVerticalStrut(SPACER));
        add(myRequiredLabel);
        add(Box.createVerticalStrut(SPACER));
        add(myClearedLabel);
        add(Box.createVerticalStrut(SPACER));
        add(myScoreLabel);
        add(Box.createVerticalStrut(SPACER));
    }
    
    /**
     * Method to create and configure a JLabel for the current Level.
     */
    private void createLevel() {
        myLevelLabel = new JLabel(LEVEL + myLevel);
        myLevelLabel.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        myLevelLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        myLevelLabel.setAlignmentY(Component.CENTER_ALIGNMENT);
    }
    
    /**
     * Method to create and configure a JLabel for the current required amount
     * of lines cleared before next level.
     */
    private void createRequiredLines() {
        myRequiredLabel = new JLabel(REQUIRED + myRequired);
        myRequiredLabel.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        myRequiredLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        myRequiredLabel.setAlignmentY(Component.CENTER_ALIGNMENT);
    }
    
    /**
     * Method to create and configure a JLabel to display how many lines have
     * been cleared this level.
     */
    private void createClearedLines() {        
        myClearedLabel =  new JLabel(CLEARED + myCleared);
        myClearedLabel.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        myClearedLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        myClearedLabel.setAlignmentY(Component.CENTER_ALIGNMENT);
    }
    
    /**
     * Method to create and configure a JLabel for total Score.
     */
    private void createScore() {
        myScoreLabel = new JLabel(SCORE + myScore);
        myScoreLabel.setFont(myFont.deriveFont(Font.PLAIN, SPACER));
        myScoreLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        myScoreLabel.setAlignmentY(Component.CENTER_ALIGNMENT);
    }    

    /* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            if (theObject != null) {
                myCleared++;
                myClearedLabel.setText(CLEARED + myCleared);
                myScore = myLevel * (int) theObject * MULTIPLIER;
                myScoreLabel.setText(SCORE + myScore);
                if (myCleared % myRequired == 0 && myCleared > 0) {
                    myCleared = 0;
                    myClearedLabel.setText(CLEARED + myCleared);
                    myLevel++;
                    myLevelLabel.setText(LEVEL + myLevel);
                    myRequired++;
                    myRequiredLabel.setText(REQUIRED + myRequired);
                    repaint();
                }
            }
            myBoardPanel.setLevel(myLevel);
            this.repaint();
            
        }
    }

}
