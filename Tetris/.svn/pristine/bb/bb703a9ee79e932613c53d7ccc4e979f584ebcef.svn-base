/*
 * TCSS 305 Fall 2015
 * Assignment 6 - Tetris.
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import model.Board;

/**
 * This is the class that displays the Keys JPanel.
 * 
 * @author Travis Holloway
 * @version Assignment 6: Tetris, December 1 2015
 */
public class KeyPanel extends JPanel implements Observer {
    
    /*
     * ***********************************   CONSTANTS    *************************************
     */

    /**
     * Auto-Generated Serial ID.
     */
    private static final long serialVersionUID = -5921137220616678665L;
    
    /**
     * Constant for the width padding around the buttons.
     */
    private static final int BORDER = 10;
    
    /**
     * Constant for the height of the button.
     */
    private static final int BUTTON_HEIGHT = 40;
    
    /**
     * Constant for the width of the button.
     */
    private static final int BUTTON_WIDTH = 38;
    
    /**
     * Constant for how many columns to use in the grid layout.
     */
    private static final int COLUMNS = 3;
    
    /**
     * Constant for how many rows to use in the grid layout.
     */
    private static final int ROWS = 4;
    
    /**
     * Constant for the width of the spacer between buttons.
     */
    private static final int SPACER = 10;
    
    /*
     * *************************************   FIELDS    **************************************
     */
    
    /**
     * A field for the Drop key.
     */
    private int myDropKey;
    
    /**
     * A field for the down key.
     */
    private int myDownKey;
    
    /**
     * A field for the left key.
     */
    private int myLeftKey;
    
    /**
     * A field for the left key.
     */
    private int myPauseKey;
    
    /**
     * A field for the right key.
     */
    private int myRightKey;
    
    /**
     * A field for the rotate key.
     */
    private int myRotateKey; 
    
    /*
     * **********************************   CONSTRUCTORS    ***********************************
     */

    /**
     * Constructor for KeyPanel.
     */
    public KeyPanel() {
        super();
        configurePanel();
    }
    
    /*
     * *********************************   PUBLIC METHODS    **********************************
     */
    
    /* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            repaint();
        }
    }
    
    /*
     * ********************************   PRIVATE METHODS    *********************************
     */
    
    /**
     * Method to initialize the class fields and configure the JPanel.
     */
    private void configurePanel() {
        setBackground(Color.LIGHT_GRAY);
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
        
        final JPanel padding = new JPanel();
        padding.setBackground(Color.LIGHT_GRAY);
        padding.setLayout(new GridLayout(ROWS, COLUMNS, SPACER, BORDER));
        padding.setBorder(BorderFactory.createEmptyBorder(BORDER, BORDER,
                                                          BORDER, BORDER));        
        createButtons(padding);
        add(padding, BorderLayout.CENTER);
    }
    
    /**
     * Helper method to create and add buttons to the Panel.
     * 
     * @param thePanel The panel that the buttons should be added to.
     */
    private void createButtons(final JPanel thePanel) {
        
        final JLabel leftLabel = new JLabel("Left", JLabel.CENTER);
        final JLabel rightLabel = new JLabel("Right", JLabel.CENTER);
        final JLabel downLabel = new JLabel("Down", JLabel.CENTER);
        final JLabel dropLabel = new JLabel("Drop", JLabel.CENTER);
        final JLabel rotateLabel = new JLabel("Rotate", JLabel.CENTER);
        final JLabel pauseLabel = new JLabel("Pause", JLabel.CENTER);
        
        final List<JButton> buttons = new ArrayList<JButton>();
        
        
        final JButton left = new TetrisButton(1, 37, new ImageIcon((Image)
                                                       resizeIcon(new ImageIcon
                                                       (".\\keyboard keys\\37.png"))));
        final JButton right = new TetrisButton(2, 39, new ImageIcon((Image)
                                                        resizeIcon(new ImageIcon
                                                        (".\\keyboard keys\\39.png"))));
        final JButton down = new TetrisButton(3, 40, new ImageIcon((Image)
                                                       resizeIcon(new ImageIcon
                                                       (".\\keyboard keys\\40.png"))));
        final JButton drop = new TetrisButton(4, 38, new ImageIcon((Image)
                                                       resizeIcon(new ImageIcon
                                                       (".\\keyboard keys\\38.png"))));
        final JButton rotate = new TetrisButton(5, 32, new ImageIcon((Image)
                                                         resizeIcon(new ImageIcon
                                                         (".\\keyboard keys\\32.png"))));
        final JButton pause = new TetrisButton(6, 80, new ImageIcon((Image)
                                                        resizeIcon(new ImageIcon
                                                        (".\\keyboard keys\\80.png"))));
        buttons.add(left);
        buttons.add(right);
        buttons.add(down);
        buttons.add(drop);
        buttons.add(rotate);
        buttons.add(pause);
        
        for (final JButton temp: buttons) {
            temp.setBorderPainted(false);
            temp.setBackground(null);
            addListener(temp);
        }
        
        
        thePanel.add(leftLabel);
        thePanel.add(rightLabel);
        thePanel.add(downLabel);
        thePanel.add(left);
        thePanel.add(right);
        thePanel.add(down);
        thePanel.add(dropLabel);
        thePanel.add(rotateLabel);
        thePanel.add(pauseLabel);
        thePanel.add(drop);
        thePanel.add(rotate);
        thePanel.add(pause);
    }
    
    /**
     * Helper method to add the ActionListener to the button.
     * 
     * @param theButton The button passed to the method.
     */
    private void addListener(final JButton theButton) {
        theButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                final JOptionPane pane = new JOptionPane("Please press the "
                                + "key you wish to assign",
                                JOptionPane.WARNING_MESSAGE,
                                JOptionPane.DEFAULT_OPTION);
                JDialog dialog = pane.createDialog(pane, "Please press the "
                                + "key you wish to assign"); 
                dialog.setVisible(true);
                dialog.addKeyListener(new KeyAdapter() {
                    public void keyTyped(final KeyEvent theEvent) {
                        ((TetrisButton) theButton).setCode(theEvent.getKeyCode());
                        theButton.setIcon(new ImageIcon((Image) 
                                          resizeIcon(new ImageIcon(".\\keyboard keys\\"
                            + theEvent.getKeyCode() + ".png"))));
                        System.out.println(theEvent.getKeyCode());
                    }
                });
                System.out.println(((TetrisButton) theEvent.getSource()).getType());
            }
        });
    }
    
    
    /**
     * Helper method to mutate the Icons to the right size.
     * 
     * @param theIcon The Icon that needs resized.
     * @return Returns a resized image of the new Icon.
     */
    private Image resizeIcon(final Icon theIcon) {
        Image returnImage = ((ImageIcon) theIcon).getImage();
        returnImage = returnImage.getScaledInstance(BUTTON_WIDTH,
                                                    BUTTON_HEIGHT,
                                                    java.awt.Image.SCALE_SMOOTH);
        return returnImage;
    }
}

