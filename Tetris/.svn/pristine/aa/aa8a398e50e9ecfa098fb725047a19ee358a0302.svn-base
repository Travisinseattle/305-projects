/*
 * TCSS 305 Fall 2015
 * Assignment 5 - PowerPaint.
 */

package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

import model.Board;

/**
 * This is the main method of the PowerPaint program.  
 * 
 * @author Travis Holloway
 * @version Assignment 5: PowerPaint, November 9 2015
 */
public class TetrisGUI extends JFrame implements Observer {
    
    
    
    /**
     *  The initial delay (in milliseconds) for the step timer. 
     */
    public static final int INITIAL_DELAY = 0;
    
    /** 
     * The default delay (in milliseconds) for the move timer. 
     */
    public static final int MOVE_DELAY = 500;
    
    /**
     * Constant for the size of the JFrame's border.
     */
    private static final int FRAME_BORDER = 10;
    
    /**
     * Constant for how many panel's there are on the right side
     * of the frame.  Used to determine height of the panels by
     * dividing the board by the amount of panels.
     */
    private static final int PANELS = 3;
    
    /**
     * Constant for the amount to add to size, used for a rounding algorithm. 
     */
    private static final int PLUS_AMOUNT = 5;
    
    /**
     * Constant for the power of 10 that will be rounded to.  (10.0 for 10^1, 100.0
     * for 10^2, etc).
     */
    private static final double ROUND_BY = 10.0;

    /**
     * Auto-generated serial required by class.
     */
    private static final long serialVersionUID = -4763324919600478629L;
    
    /**
     * JFrame field that provides reference to the main JFrame container of
     * Tetris.
     */
    private final JFrame myFrame;
    
    /**
     * JPanel field that provides reference to the BoardPanel JPanel container.
     */
    private final BoardPanel myBoardPanel;
    
    /**
     * Timer field that provides reference to the Timer used to animate the program.
     */
    private final Timer myTimer;
    
    /**
     * A field for the left key.
     */
    private char myLeftKey;
    
    /**
     * A field for the right key.
     */
    private char myRightKey;
    
    /**
     * A field for the down key.
     */
    private char myDownKey;
    
    /**
     * A field for the Drop key.
     */
    private char myDropKey;
    
    /**
     * A field for the left key.
     */
    private char myPauseKey;
    
    /**
     * A field for the rotate key.
     */
    private char myRotateKey;
    
    /**
     * Field that provides a reference to the board in BoardPanel.
     */
    private final Board myBoard;
    
    /**
     * Field that provides reference to boolean to indicate if the game
     * is paused or not.
     */
    private boolean myPause;


    /**
     * Constructor for TetrisGui.  Calls super(), instantiates myFrame and
     * myBoardPanel.
     */
    public TetrisGUI() {
        super();
        myFrame = new JFrame();
        myBoardPanel = new BoardPanel();
        myTimer = new Timer(MOVE_DELAY, new MoveListener());
        myBoard = ((BoardPanel) myBoardPanel).getBoard();
        myPause = false;
    }
    
    /**
     * Method that provides fields to class constants and configures the class
     * JFrame.
     */
    public void start() {
        
        /*
         * Begin by adding a title to the JFrame, a default close operation, and 
         * centering the JFrame.
         */
        myFrame.setTitle("Tetris");
        
        //Set the Icon for the Frame Title.
        final Icon saveIcon = new ImageIcon(".\\icons\\Tetris.png");
        final Image image = ((ImageIcon) saveIcon).getImage();
        myFrame.setIconImage(image);
        
        //Call helper method to add containers.
        addContainers();
        
        //Call helper method to assign keys.
        assignKeys();
        
        //assign the key listener.
        myFrame.addKeyListener(new TetrisKeyListener());
        
      //Start the game.
        myBoard.newGame(myBoard.getWidth(), myBoard.getHeight(), null);
        
        //start the timer.
        myTimer.start();
        
        /*
         * Set the Default Close Operation. Pack the elements of myFrame. Set the minimum
         * to the current size. Make the frame visible. Center it in the middle of
         * the display.
         */
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.pack();
        myFrame.setVisible(true);
        myFrame.setLocationRelativeTo(null);
    }
    
    /**
     * Helper method for start() that adds the Containers to myFrame.
     */
    private void addContainers() {
        final JPanel wrapper = new JPanel();
        wrapper.setLayout(new BoxLayout(wrapper, BoxLayout.X_AXIS));
        wrapper.setBackground(Color.GRAY);
        wrapper.setPreferredSize(new Dimension(myBoardPanel.getWidth() * 2,
                                               myBoardPanel.getHeight()));
        
        final JPanel right = new JPanel();
        right.setLayout(new BoxLayout(right, BoxLayout.Y_AXIS));
        right.setBackground(Color.GRAY);
        
        final JPanel preview = new JPanel();
        preview.setBackground(Color.BLUE);
        
        final JPanel score = new JPanel();
        score.setBackground(Color.RED);
        
        final JPanel keys = new JPanel();
        keys.setBackground(Color.GREEN);
        
        right.add(preview);
        right.add(Box.createVerticalStrut(FRAME_BORDER));
        right.add(score);
        right.add(Box.createVerticalStrut(FRAME_BORDER));
        right.add(keys);

        wrapper.add(myBoardPanel);
        wrapper.add(Box.createHorizontalStrut(FRAME_BORDER));
        wrapper.add(right);
        myFrame.add(wrapper, BorderLayout.CENTER);
        
        /*
         * Component listener to catch resize events on myBoardPanel.
         */
        myBoardPanel.addComponentListener(new ComponentAdapter() 
        {  
            public void componentResized(final ComponentEvent theEvent) {
                final Component c = (Component) theEvent.getSource();
                //Call the helper method to change the block sizes.
                changeSize(c);
                
                /*
                 * Set the right panel sizes based on the width of myBoardPanel,
                 * the for height, instantiate an integer that is the height of 
                 * myBoardPanel divided by 3, minus the width of the 2 struts.
                 */
                final int boardHeight = (myBoardPanel.getHeight() - FRAME_BORDER * 2) / PANELS;
                preview.setSize(new Dimension(myBoardPanel.getWidth(), boardHeight));
                score.setSize(new Dimension(myBoardPanel.getWidth(), boardHeight));
                keys.setSize(new Dimension(myBoardPanel.getWidth(), boardHeight));
                repaint();
            }
        });
    }
    
    /**
     * Helper method to set the size and width of blocks for the BoardPanel, used by
     * Component Listener.
     * 
     * @param theComponent The component captured by the Component listener and passed
     * to the method.
     */
    private void changeSize(final Component theComponent) {
      //Cast c to a multiple of 10 and pass it to setBlockWidth() and setBlockHeight.
        int width = theComponent.getWidth();
        int height = theComponent.getHeight();
        height = (int) (Math.round((width + PLUS_AMOUNT) / ROUND_BY) * ROUND_BY);
        width = (int) (Math.round((width + PLUS_AMOUNT) / ROUND_BY) * ROUND_BY);
        myBoardPanel.setBlockWidth(width);
        myBoardPanel.setBlockHeight(height);
    }
    
    /**
     * Helper method to assign keys.
     */
    private void assignKeys() {
        myLeftKey = 'a';
        myRightKey = 'd';
        myDownKey = 's';
        myDropKey = 'l';
        myPauseKey = 'p';
        myRotateKey = 'j';
    }

    /* (non-Javadoc)
     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)
     */
    @Override
    public void update(final Observable theObservable,
                       final Object theObject) {
        if (theObservable instanceof Board) {
            repaint();
        }

    }
    
    /**
     * A class to control move events for the Timer.
     * 
     * @author Travis Holloway
     * @version Assignment 5: PowerPaint, November 9 2015
     */
    private class MoveListener implements ActionListener {

        @Override
        public void actionPerformed(final ActionEvent theEvent) {
            myBoard.step();
            myBoardPanel.repaint();
        }
    }
    
    /**
     * The key listener for the Tetris Program. 
     * 
     * @author Travis Holloway
     * @version Assignment 5: PowerPaint, November 9 2015
     */
    public class TetrisKeyListener extends KeyAdapter {
        
        /**
         * Handles a key being typed.
         * 
         * @param theEvent The KeyEvent generated by the key.
         */
        public void keyTyped(final KeyEvent theEvent) {            
            if (theEvent.getKeyChar() == myLeftKey) {
                //Call moveLeft and repaint.
                myBoard.moveLeft();
                myBoardPanel.repaint();
            } else if (theEvent.getKeyChar() == myRightKey) {
              //Call moveRight and repaint.
                myBoard.moveRight();
                myBoardPanel.repaint();
            } else if (theEvent.getKeyChar() == myDownKey) {
              //Call moveDown and repaint.
                myBoard.moveDown();
                myBoardPanel.repaint();
            } else if (theEvent.getKeyChar() == myDropKey) {
              //Call hardDrop and repaint.
                myBoard.hardDrop();
                myBoardPanel.repaint();
            } else if (theEvent.getKeyChar() == myRotateKey) {
                //call rotate and repaint.
                myBoard.rotate();
                myBoardPanel.repaint();
            } else if (theEvent.getKeyChar() == myPauseKey) {
                //bitwise boolean swap.
                myPause ^= true;
                if (myPause) {
                    myTimer.stop();
                    myBoardPanel.repaint();
                } else {
                    myTimer.start();
                    myBoardPanel.repaint();
                }
            }
        }
    }
}